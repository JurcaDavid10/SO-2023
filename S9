#include <fcntl.h>
#include <unistd.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#include <time.h>
#include <dirent.h>
#include <stdint.h>
#include <sys/wait.h>
#include <ctype.h>

struct Header {
    int16_t signature;
    int32_t fileSize;
    int32_t reserved;
    int32_t dataOffset;
};

struct InfoHeader {
    int32_t size;
    int32_t width;
    int32_t height;
    int16_t planes;
    int16_t bitCount;
    int32_t compression;
    int32_t XpixelsPerM;
    int32_t YpixelsPerM;
    int32_t colorsUsed;
    int32_t colorsImportant;
};

struct ColorTable {
    int8_t red;
    int8_t green;
    int8_t blue;
    int8_t reserved;
};

int fOut;
DIR *dir;
DIR *outDir;
char buffer[3000];
struct InfoHeader infoHeader;
int procesFiu, status;
int pid[100];

int pipeFF[100][2];

void verif_pipes(int i) {
    if(pipe(pipeFF[i]) < 0) {
        perror("Eroare la pipe-uri.\n");
        exit(-1);
    }
}

void createFile(char *buffer, char *fileName, char *dirName)
{
    char outFileName[500] = "";
    char *p = strtok(fileName, ".");
    strcat(outFileName, p);
    strcat(outFileName, "_statistica");
    strcat(outFileName, ".txt");

    char pathName[500] = "./";
    strcat(pathName, dirName);
    strcat(pathName, "/");
    strcat(pathName, outFileName);

    int fp;

    fp = open(pathName, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR);
    
    write(fp,buffer,strlen(buffer));

    close(fp);
}

void verifyArgs(int argc, char **args) {
    if(argc != 4) {
        if(argc == 3 || argc == 2 || argc == 1) {
            perror("Usage ./program <director_intrare> <director_iesire> <c>");
        }
        else {
            char *err = strcat("Usage ./program ", args[1]);
            perror(err);
        }

        exit(-1);
    }
}

void verifyCorrectSentences(char* text, char* letter) {
    const char *scriptName = "script.sh";

    char command[100];
    snprintf(command, sizeof(command), 
        "bash %s %s\n", 
        scriptName, 
        letter
    );

    FILE *scriptInput = popen(command, "w");
    if (scriptInput == NULL) {
        perror("Error opening script");
        exit(EXIT_FAILURE);
    }

    fprintf(scriptInput, text);

    if (pclose(scriptInput) == -1) {
        perror("Error closing script");
        exit(EXIT_FAILURE);
    }
}

void generateStatsDir(struct dirent *info, char* dirName) {
    struct stat fileStat;
    fstat(*info->d_name, &fileStat);

    snprintf(buffer,sizeof(buffer), "nume director: %s\nidentificatorul utilizatorului: %s\ndrepturi de acces user: %s%s%s\ndrepturi de acces grup: %s%s%s\ndrepturi de acces altii: %s%s%s\n\n", info->d_name,info->d_name, (fileStat.st_mode & S_IRUSR) ? "R" : "-", (fileStat.st_mode & S_IWUSR) ? "W" : "-", (fileStat.st_mode & S_IXUSR) ? "X" : "-", (fileStat.st_mode & S_IRGRP) ? "R" : "-", (fileStat.st_mode & S_IWGRP) ? "W" : "-", (fileStat.st_mode & S_IXGRP) ? "X" : "-", (fileStat.st_mode & S_IROTH) ? "R" : "-", (fileStat.st_mode & S_IWOTH) ? "W" : "-", (fileStat.st_mode & S_IXOTH) ? "X" : "-");
    
    createFile(buffer, info->d_name, dirName);
}
